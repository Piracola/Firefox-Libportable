# GitHub Actions 工作流：浏览器便携版打包
# 这个工作流支持 Zen 浏览器和 Firefox 浏览器的便携版构建
name: Firefox Portable Build

on:
  workflow_dispatch:
    inputs:
      reason:
        description: '构建原因'
        required: false
        default: '手动触发构建'
        type: string
  push:
    branches:
      - main
      - master
  schedule:
    - cron: '0 0 * * *'

jobs:
  build-firefox:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
    # 步骤 1: 检出代码仓库
    - name: Checkout repository
      uses: actions/checkout@v4

    # 步骤 2: 恢复版本缓存
    - name: Cache version info
      uses: actions/cache@v4
      with:
        path: firefox_last_version.txt
        key: firefox-version-${{ github.run_number }}
        restore-keys: |
          firefox-version-

    # 步骤 3: 检查 Firefox 浏览器版本更新
    - name: Check Firefox Browser version
      id: version-check
      run: |
        # 获取 Firefox 最新版本信息
        $latest_url = "https://product-details.mozilla.org/1.0/firefox_versions.json"
        $trigger_event = "${{ github.event_name }}"
        
        try {
          $response = Invoke-RestMethod -Uri $latest_url
          $latest_version = $response.LATEST_FIREFOX_VERSION
          echo "firefox_version=$latest_version" >> $env:GITHUB_OUTPUT
          
          # 手动触发和代码提交触发总是执行构建
          if ($trigger_event -eq "workflow_dispatch" -or $trigger_event -eq "push") {
            echo "should_build=true" >> $env:GITHUB_OUTPUT
            echo "build_reason=$trigger_event" >> $env:GITHUB_OUTPUT
            $latest_version | Out-File -FilePath "firefox_last_version.txt" -Encoding UTF8
          } else {
            # 定时触发：检查版本更新
            $version_file = "firefox_last_version.txt"
            if (Test-Path $version_file) {
              $last_version = Get-Content $version_file
              if ($last_version -eq $latest_version) {
                echo "should_build=false" >> $env:GITHUB_OUTPUT
                echo "build_reason=no_update" >> $env:GITHUB_OUTPUT
                exit 0
              } else {
                echo "should_build=true" >> $env:GITHUB_OUTPUT
                echo "build_reason=version_update" >> $env:GITHUB_OUTPUT
                $latest_version | Out-File -FilePath $version_file -Encoding UTF8
              }
            } else {
              echo "should_build=true" >> $env:GITHUB_OUTPUT
              echo "build_reason=first_run" >> $env:GITHUB_OUTPUT
              $latest_version | Out-File -FilePath $version_file -Encoding UTF8
            }
          }
        } catch {
          echo "should_build=true" >> $env:GITHUB_OUTPUT
          echo "build_reason=error_fallback" >> $env:GITHUB_OUTPUT
        }

    # 步骤 4: 下载 Firefox 浏览器
    - name: Download Firefox Browser
      id: download-firefox
      run: |
        $version = "${{ steps.version-check.outputs.firefox_version }}"
        $url = "https://download-installer.cdn.mozilla.net/pub/firefox/releases/$version/win64/en-US/Firefox%20Setup%20$version.exe"
        $output = "$env:GITHUB_WORKSPACE\firefox-installer.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        echo "archive_path=$output" >> $env:GITHUB_OUTPUT

    # 步骤 5: 解压并处理 Firefox 浏览器文件
    - name: Extract and process Firefox Browser
      run: |
        # 解压 Firefox 浏览器
        $archive = "${{ steps.download-firefox.outputs.archive_path }}"
        New-Item -ItemType Directory -Force -Path "D:\firefox"
        Set-Location -Path "D:\firefox"
        7z x "$archive" -y
        
        # 重命名 core 文件夹为 Firefox 并删除 setup.exe
        if (Test-Path "D:\firefox\core") {
          Rename-Item -Path "D:\firefox\core" -NewName "Firefox" -Force
        }
        if (Test-Path "D:\firefox\setup.exe") {
          Remove-Item -Path "D:\firefox\setup.exe" -Force
        }

    # 步骤 6: 复制 libportable 工具并创建便携版
    - name: Copy libportable tools and create portable package
      working-directory: D:\firefox\Firefox
      run: |
        # 复制 libportable 工具
        $libportableSource = "$env:GITHUB_WORKSPACE\libportable"
        Copy-Item -Path "$libportableSource\*" -Destination . -Recurse -Force
        
        # 运行便携版创建脚本
        ./injectpe.bat
      continue-on-error: true

    # 步骤 7: 打包并上传便携版文件
    - name: Package and upload portable build
      run: |
        # 打包便携版文件
        $sourceDir = "D:\firefox"
        $outputZip = "$env:GITHUB_WORKSPACE\firefox-portable.zip"
        7z a -tzip "$outputZip" "$sourceDir\*"
        
        # 上传构建产物
        echo "firefox_version=${{ steps.version-check.outputs.firefox_version }}" >> $env:GITHUB_OUTPUT
        echo "build_reason=${{ steps.version-check.outputs.build_reason }}" >> $env:GITHUB_OUTPUT
        $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        echo "formatted_build_time=$buildTime" >> $env:GITHUB_OUTPUT

    # 步骤 8: 创建 GitHub Release
    - name: Create Release and Upload Portable Package
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: firefox-${{ steps.version-check.outputs.firefox_version }}
        name: Firefox Portable ${{ steps.version-check.outputs.firefox_version }}
        body: |
          Firefox ${{ steps.version-check.outputs.firefox_version }} 便携版
          
          这是一个自动构建的 Firefox 浏览器便携版本，基于 libportable 项目。
          
          ## 版本信息
          - 基础版本：${{ steps.version-check.outputs.firefox_version }}
          - 构建时间：${{ steps.version-check.outputs.build_reason }}
          - 构建环境：${{ runner.os }}
          - 构建触发：${{ steps.version-check.outputs.build_reason }}
        draft: false
        prerelease: false
        files: |
          ${{ github.workspace }}\firefox-portable.zip